<div class='col-xs-12'>
	<div class='title'>
		<h1>eBear.FM</h1>
	</div>

	<div class="col-xs-6 col-xs-offset-3 well" id="player"></div>

	<div class="col-xs-6 col-xs-offset-3">
		<ul class="list-group">
		<!-- Play Queue List -->
		<% @tweets.each do |tweet| %>
			<li class="list-group-item"> <%= tweet.vid_title %> - <span class="twitter-handle">@<%= tweet.username %></span></li>
		<% end %>
		</ul>
	</div>
</div>

<%= javascript_tag do %>
	var tweets = <%= raw @tweets.to_json %>;
  console.log('tweets: ' + tweets);

  // TODO: If play queue is empty, play default playlist
  if (tweets.length == 0) {
    console.log('empty play queue');
  }

	var videos = [];
	for (var i=0; i < tweets.length; i++) {
		videos[i] = tweets[i].video_id;
	}
<% end %>

<script type="text/javascript">
  var player;
  var first_vid = '';
  var index = 1;
  if (tweets.length > 0) { 
  	// 2. This code loads the IFrame Player API code asynchronously.
  	var tag = document.createElement('script');

  	tag.src = "https://www.youtube.com/iframe_api";
  	var firstScriptTag = document.getElementsByTagName('script')[0];
  	firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  	// 3. This function creates an <iframe> (and YouTube player)
  	//    after the API code downloads.
  	player;
  	first_vid = tweets[0].video_id;
  }

	function onYouTubeIframeAPIReady() {
		player = new YT.Player('player', {
			height: '360',
			width: '640',
			videoId: first_vid,
			playerVars: {
				//controls: 0,
				enablejsapi: 1,
				showinfo: 0,
				rel: 0,
				modestbranding: 1,
				cc_load_policy: 0,
				iv_load_policy: 3
			},
			events: {
				'onReady': onPlayerReady,
				'onStateChange': onPlayerStateChange
			}
		});
	}

	// 4. The API will call this function when the video player is ready.
	function onPlayerReady(event) {
		event.target.playVideo();
	}

	// TODO: Clean up this function
	function onPlayerStateChange(event) {
		if (event.data == 0) {
			//player.stopVideo();
			console.log('ended!');
			setPlayed(videos[index-1]);
			// Play next song if there are still videos left to play
			if (videos.length > 0) {
				console.log('in if');
				player.loadVideoById(videos[index]);

				// If the index is less than videos array length, increment
				if (index < videos.length - 1) {
					console.log('in index if');
					index++;
				// Loop
				} else {
					console.log('in index else');
					index = 0;
				}
				
				// TODO: Set up playlist like play queue
				//videos.shift();
				//done = true;
			} else {
				event.target.playVideo();
			}
		}

		/*if (event.data == YT.PlayerState.PLAYING && !done) {
		  setTimeout(stopVideo, 6000);
		  done = true;
		}*/
	}
		
	function stopVideo() {
		player.stopVideo();
	} 

	// Updates the video list queue
	// Inputs: None
	// Return: None
	function updateTweetList() {
		$.ajax({
			url: 'http://localhost:3000/',
			type: 'GET',
			dataType: 'json',
			success: function(result) {
				for (var i=0; i < result.length; i++) {
					console.log(result[i])
					tweets = result
				}
			}
		});

		// TODO: Update the tweet list in the view
	}

	// TODO: Make Ajax POST function call to update the tweets in back end
	// Create a controller action that updates the tweets
	function setPlayed(videoId) {
		$.ajax({
			url: 'http://localhost:3000/update',
			type: 'POST',
			dataType: 'json',
			data: { 'video_id' : videoId },
			success: function(result) {
				console.log('success');
			}
		});
	}

	$(document).ready(function() {
		// Retrieve tweets every 3 seconds
		setInterval(updateTweetList, 3000);
	});
</script>

